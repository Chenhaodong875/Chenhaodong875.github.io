<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[网络各层模型概述]]></title>
    <url>%2F2019%2F09%2F24%2Farticle-3%2F</url>
    <content type="text"><![CDATA[1.物理层：定义了终端设备的传输介质，传输的是比特流。 ​ 注意：不管是什么传输介质，传输数据的过程中，信号都会出现衰减，这个时候需 要使用设备来延长信号的传输距离。 ​ 物理层设备：hub集线器，只能识别比特流； ​ 总线型：网络传输效率特别低 ​ 无学习功能每个接口都是一个冲突域。 2.数据链路层：把比特流封装成数据帧，实现基于MAC地址的寻址和转发； ​ （1）MAC地址：也叫物理地址，以太网地址； ​ 由48位二进制数组成，为了读写方便，用十六进制表示。 ​ 其中前24位是厂商信息，后24位表示设备，由厂家自定义。 ​ MAC地址是由厂家出厂直接刻录到网卡里的，一般不能修改。 ​ ipconfig /all ——-用于查看网卡信息，在Windows命令行输入。 ​ MAC地址分类： ​ 单播MAC地址：如果一个MAC地址的第八位是0，这个地址表示单播MAC； 组播MAC地址：如果一个MAC地址的第八位是1，这个地址表示组播MAC； ​ 广播MAC地址：全 FF:FF:FF:FF ​ （2）以太网二层数据帧格式： ​ 6字节目标MAC地址+6字节源MAC地址+2字节类型+数据（最大1500字节）+ ​ 4字节的帧校验序列 ​ （3）数据链路层设备：交换机（二层设备） ​ 工作原理：利用ARP地址解析协议，根据IP地址找MAC地址； ​ Windows系统中的ARP命令： ​ arp -a：查看ARP缓存表； ​ arp -d：清除ARP缓存表； 123456789101、pc1想和pc3通信，先查看自己ARP表项目，如果有就直接发送数据；如果没有就发送广播，以ARP广播的形式发送出去。source：192.168.1.1 M1 destination：192.168.1.3 FF2、交换机：学习/转发学习：把pc1的MAC地址放到MAC地址表中；转发：目标地址为全FF，广播到除源端口意外的所有端口；3、反应：如果是来找我的就恢复；如果不是找我的，我就丢弃。pc3回复的报文,以单播的形式回复source： 192.168.1.3 M3 destination：192.168.1.1 M14、交换机：学习/转发学习：把pc3的MAC地址存储到自己的MAC地址表中；转发：收到单播的数据包，查找自己的MAC地址表中记录，直接单播给pc1; ​ （4）ARP欺骗：利用交换机广播的工作原理，对用户身份没有验证功能。 ​ 欺骗所有主机（告诉所有客户端假的网关mac地址）； ​ 中间人攻击（欺骗两个通信主机，获取他们的通信数据）； 3.网络层：把数据帧转换成数据包，实现基于IP地址的寻址和转发。 ​ 数据包格式：三层IP头部+数据 ​ 注意：TTL为生存时间期限，是一个三层防环机制，数据包每经过一个三层设备（路 由器)，TTL值就会减1，当TTL值=0时，那么这个数据包就不能继续传播，会 被丢弃；其中每经过一次三层设备，叫做一跳。 ​ tracert 域名或IP地址 ——追踪数据包，显示数据包经过的三层设备。 ​ 网络层协议： ​ ICMP：互联网控制报文协议，是一个错误侦测与回馈机制，用来测试网络连 通性 ​ 报文类型：request(请求报文)与reply(回复报文) ​ ping命令—-基于ICMP协议 1234567891011 -t 一直ping ，crl+c取消​ -a 解析主机名​ -l 指定测试数据包大小​ -i 指定生存时间​ -n 指定数据包的数量​ -f 不分片(不拆分数据包) ​ 网络层设备：路由器（三层） ​ 路由器作用： ​ （1）实现不同网段的通信 ​ （2）隔离广播域 ​ （3）为数据包寻找一条最优路径 ​ 注意：路由器的每个接口都是不同的一个网段 ​ MAC地址是二层的概念，是不能跨网段的。 ​ 路由器的工作原理： 123456789101112131415161718192021222324252627当PC1（192.168.1.1）------&gt;PC3（的92.168.2.1）通信的时候： （1）PC1先查看自己的ARP表，有直接发送；没有进行判断。 ​ PC1先判断目标主机和自己是否在同一个网段：若在同一个网段，直接发送ARP请求 （广播）；若没有在相同网段，就把数据包发送给网关；​ source源：192.168.1.1 PC1的MAC地址 ​ destination目标：192.168.2.1 PC1网关的MAC地址（2）路由器：根据目标MAC地址判断是不是找我的，是找我的就回复，不是就丢弃。​ 回复：把数据帧还原成数据包，根据目标IP地址查看路由表，转发。​ 路由器把到达192,。168.2.1的数据包从f0/1接口发送出去。​ source 192.168.1.1 PC3网关的MAC地址​ destination 192.168.2.1 PC3的MAC地址（3）PC3反应：给PC1回复数据包。 source： 192,.168.2.1 PC3的MAC地址​ destination： 192.168.1.1 PC3的网关MAC地址（4）路由器：目标Mac是找我的，我就拆包，看到里边的目标ip;根据目标IP进行路由表的 查找，从相应接口发送进去。​ source： 192.168.2.1 PC1的网关MAC地址​ destination： 192,168.1.1 PC1的MAC地址 ​ 边缘路由器：一端连着内网（LAN），一端连着外网（WAN） ​ 默认路由器：一般配置在出口路由器，一边连接内网一边连接外网，所有不知道的数据 包都交给互联网 ​ 解决链路冗余的两种方法：负载均衡与浮动路由。 ​ 负载均衡：多条链路同时进行传输； ​ 浮动路由：多条链路中至于一条是主链路，其他都是备份链路，只有主链路发生故 障，备份链路才会被启用。 ​ 通过修改静态路由的优先级（管理距离）来决定那条链路是主链路。 ​ 优先级的范围是1——255，越小越优先，默认是1可修改优先级，在下一 跳后添加]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[思科模拟器中网络配置]]></title>
    <url>%2F2019%2F09%2F24%2Farticle-4%2F</url>
    <content type="text"><![CDATA[首先下载并安装思科模拟器软件 Cisco Packet Tracer Student 安装好后打开模拟器，根据需求添加设备，然后连接各设备。 1.交换机（二层）的配置：]]></content>
      <tags>
        <tag>思科、网络配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何搭建个人博客？？]]></title>
    <url>%2F2019%2F09%2F08%2Farticle%201%2F</url>
    <content type="text"><![CDATA[搭建个人博客我们通常使用Hexo+Github Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 GitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名GitHub。GitHub于2008年4月10日正式上线，除了Git代码仓库托管及基本的 Web管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能。 本地Win10搭建环境安装Git(下载安装包，打开后一直下一步到结束就行)https://git-scm.com/download/win检查电脑是否安装了 Git ？Windows + R -&gt; cmd -&gt; 进入 Dos 窗口在 Dos 窗口下，输入以下命令并执行 ：git –version把下列这段代码加入本地hosts文件(一般在c:\windows\system32\drivers\etc)内，加速访问Github网站的速度 GitHub Start192.30.253.112 github.com192.30.253.119 gist.github.com151.101.100.133 assets-cdn.github.com151.101.100.133 raw.githubusercontent.com151.101.100.133 gist.githubusercontent.com151.101.100.133 cloud.githubusercontent.com151.101.100.133 camo.githubusercontent.com151.101.100.133 avatars0.githubusercontent.com151.101.100.133 avatars1.githubusercontent.com151.101.100.133 avatars2.githubusercontent.com151.101.100.133 avatars3.githubusercontent.com151.101.100.133 avatars4.githubusercontent.com151.101.100.133 avatars5.githubusercontent.com151.101.100.133 avatars6.githubusercontent.com151.101.100.133 avatars7.githubusercontent.com151.101.100.133 avatars8.githubusercontent.com GitHub End安装Nodejs(下载安装包，打开后一直下一步到结束就行)http://nodejs.cn/download/检查电脑是否安装了 Node.js ？Windows + R -&gt; cmd -&gt; 进入 Dos 窗口在 Dos 窗口下，输入以下命令并执行 ：node -v 下载安装完Git后会出现以下两个图标：![Git base](C:\Users\hp\blog\Git base.png)![Git CMD](C:\Users\hp\blog\Git CMD.png)在git上经常使用的命令如下：hexo generate (hexo g) 生成静态文件$ hexo server (hexo s) 启动本地服务$ hexo deploy (hexo d) 提交到远程仓库$ hexo new page “xx”(hexo n page) 创建页面$ hexo new “xx” (hexo n “”) 创建文章$ hexo d -g 生成静态并提交到远程仓库$ hexo s -g 生成静态文件并启动本地预览$ hexo clean 清除本地 public 文件 安装Hexo（1）第一步：安装Hexo扩展插件，点击Git Bash,执行以下代码：$ npm install hexo-cli -g$ hexo init blog$ cd blog$ npm install$ hexo server（2）第二步：创建一个 blog 文件夹，下载 hexo 相应的代码到该文件中下。此时目录情况如下 ： node_modules npm 文件缓存目录scaffolds 文夹件下存放的是文章、页面模版scource 文夹件下存放的是我们的资源文件themes 文件下存放的是我们的主题文件.gitignore git 忽略文件，设置提交文件时，哪些文件不提交_config.yml 站点配置文件package.json 站点版本，站点依赖文件yarn.lock yarn.lock 文件由 Yarn 自动创建，并且完全通过 Yarn 进行操作。（3）第三步：进入blog文件夹：输入命令cd blog（4）第四步：安装相关hexo的代码：$ hexo generate (hexo g) 生成静态文件$ hexo server (hexo s) 启动本地服务$ hexo deploy (hexo d) 提交到远程仓库$ hexo new page “xx”(hexo n page) 创建页面$ hexo new “xx” (hexo n “”) 创建文章$ hexo d -g 生成静态并提交到远程仓库$ hexo s -g 生成静态文件并启动本地预览$ hexo clean 清除本地 public 文件 （5）第五步：启动本地服务，使用Git hash输入命令hexo s -g,完成后如图所示在浏览器输入 http://localhost:4000/ 就可以访问刚刚创建的静态博客了。完成以上这些步骤后就可以建立一个自己能够访问的博客页面。要想其他人也能访问我们的博客的话，需要用到Github。 GitHub注册注册GitHub账号并添加一个远程仓库点击进入https://github.com/官网内注册GitHub账号：注册成功后，登录账号，点击右侧 “+” 号，然后点击 New repository 添加仓库，如图 ：完成上述操作后，点击 Create repository 创建仓库。仓库创建成功后，如图 ：这里有两个地址，一个是 Https，一个是 SSH 。Https 每次提交都需要输入用户名和密码，SSH 只要添加了 SSH key 值，以后提交不需要输入用户名和密码。注 ： 这里创建的仓库名称必须为 username.github.io，username 替换成你的 github 用户名，每个账户有且只有一个仓库用来存放网页静态文件，这里名称是固定的。当创建其他仓库的时候，仓库名称可以自定义。GitHub 添加 SSH key检查本地是否有 SSH key$ cd ~/.ssh$ ls 第一步是进入 .ssh 文件夹，第二步是显示 .ssh 文件下的文件夹及文件。如果 SSH key 存在，就会显示 id_rsa、id_rsa.pub、know_hosts 三个文件 。没有也没关系，下面我们就来创建 SSH key$ ssh-keygen -t rsa -C “你的邮箱”]]></content>
      <tags>
        <tag>创建博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F09%2F08%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
